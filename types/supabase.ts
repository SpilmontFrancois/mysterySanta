/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/events': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.events.id'];
          end_date?: parameters['rowFilter.events.end_date'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['events'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions['events'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.events.id'];
          end_date?: parameters['rowFilter.events.end_date'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.events.id'];
          end_date?: parameters['rowFilter.events.end_date'];
        };
        body: {
          /** events */
          events?: definitions['events'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/participations': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.participations.id'];
          user1_id?: parameters['rowFilter.participations.user1_id'];
          user2_id?: parameters['rowFilter.participations.user2_id'];
          user1_hasPresent?: parameters['rowFilter.participations.user1_hasPresent'];
          user2_hasPresent?: parameters['rowFilter.participations.user2_hasPresent'];
          event_id?: parameters['rowFilter.participations.event_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['participations'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** participations */
          participations?: definitions['participations'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.participations.id'];
          user1_id?: parameters['rowFilter.participations.user1_id'];
          user2_id?: parameters['rowFilter.participations.user2_id'];
          user1_hasPresent?: parameters['rowFilter.participations.user1_hasPresent'];
          user2_hasPresent?: parameters['rowFilter.participations.user2_hasPresent'];
          event_id?: parameters['rowFilter.participations.event_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.participations.id'];
          user1_id?: parameters['rowFilter.participations.user1_id'];
          user2_id?: parameters['rowFilter.participations.user2_id'];
          user1_hasPresent?: parameters['rowFilter.participations.user1_hasPresent'];
          user2_hasPresent?: parameters['rowFilter.participations.user2_hasPresent'];
          event_id?: parameters['rowFilter.participations.event_id'];
        };
        body: {
          /** participations */
          participations?: definitions['participations'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/interests': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.interests.id'];
          created_at?: parameters['rowFilter.interests.created_at'];
          name?: parameters['rowFilter.interests.name'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['interests'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** interests */
          interests?: definitions['interests'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.interests.id'];
          created_at?: parameters['rowFilter.interests.created_at'];
          name?: parameters['rowFilter.interests.name'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.interests.id'];
          created_at?: parameters['rowFilter.interests.created_at'];
          name?: parameters['rowFilter.interests.name'];
        };
        body: {
          /** interests */
          interests?: definitions['interests'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/profiles': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          updated_at?: parameters['rowFilter.profiles.updated_at'];
          full_name?: parameters['rowFilter.profiles.full_name'];
          avatar_url?: parameters['rowFilter.profiles.avatar_url'];
          budget?: parameters['rowFilter.profiles.budget'];
          address?: parameters['rowFilter.profiles.address'];
          interests?: parameters['rowFilter.profiles.interests'];
          waiting_list?: parameters['rowFilter.profiles.waiting_list'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['profiles'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          updated_at?: parameters['rowFilter.profiles.updated_at'];
          full_name?: parameters['rowFilter.profiles.full_name'];
          avatar_url?: parameters['rowFilter.profiles.avatar_url'];
          budget?: parameters['rowFilter.profiles.budget'];
          address?: parameters['rowFilter.profiles.address'];
          interests?: parameters['rowFilter.profiles.interests'];
          waiting_list?: parameters['rowFilter.profiles.waiting_list'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          updated_at?: parameters['rowFilter.profiles.updated_at'];
          full_name?: parameters['rowFilter.profiles.full_name'];
          avatar_url?: parameters['rowFilter.profiles.avatar_url'];
          budget?: parameters['rowFilter.profiles.budget'];
          address?: parameters['rowFilter.profiles.address'];
          interests?: parameters['rowFilter.profiles.interests'];
          waiting_list?: parameters['rowFilter.profiles.waiting_list'];
        };
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  events: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: time with time zone */
    end_date: string;
  };
  participations: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    user1_id: string;
    /** Format: uuid */
    user2_id: string;
    /**
     * Format: boolean
     * @default false
     */
    user1_hasPresent: boolean;
    /**
     * Format: boolean
     * @default false
     */
    user2_hasPresent: boolean;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: number;
  };
  interests: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    full_name?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    budget?: string;
    /** Format: text */
    address?: string;
    /** Format: ARRAY */
    interests?: unknown[];
    /**
     * Format: boolean
     * @default false
     */
    waiting_list: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description events */
  'body.events': definitions['events'];
  /** Format: bigint */
  'rowFilter.events.id': string;
  /** Format: time with time zone */
  'rowFilter.events.end_date': string;
  /** @description participations */
  'body.participations': definitions['participations'];
  /** Format: bigint */
  'rowFilter.participations.id': string;
  /** Format: uuid */
  'rowFilter.participations.user1_id': string;
  /** Format: uuid */
  'rowFilter.participations.user2_id': string;
  /** Format: boolean */
  'rowFilter.participations.user1_hasPresent': string;
  /** Format: boolean */
  'rowFilter.participations.user2_hasPresent': string;
  /** Format: bigint */
  'rowFilter.participations.event_id': string;
  /** @description interests */
  'body.interests': definitions['interests'];
  /** Format: bigint */
  'rowFilter.interests.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.interests.created_at': string;
  /** Format: text */
  'rowFilter.interests.name': string;
  /** @description profiles */
  'body.profiles': definitions['profiles'];
  /** Format: uuid */
  'rowFilter.profiles.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.profiles.updated_at': string;
  /** Format: text */
  'rowFilter.profiles.full_name': string;
  /** Format: text */
  'rowFilter.profiles.avatar_url': string;
  /** Format: text */
  'rowFilter.profiles.budget': string;
  /** Format: text */
  'rowFilter.profiles.address': string;
  /** Format: ARRAY */
  'rowFilter.profiles.interests': string;
  /** Format: boolean */
  'rowFilter.profiles.waiting_list': string;
}

export interface operations {}

export interface external {}
